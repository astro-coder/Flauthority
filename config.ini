[Default]
CELERY_BROKER_URL = redis://192.168.99.100:6379/0
CELERY_RESULT_BACKEND = redis://192.168.99.100:6379/0
CELERY_TASK_TIMEOUT = 3600
Flask_tcp_port = 3000
Flask_tcp_ip = 0.0.0.0

#ca details
ca_cert_file = /opt/flauthority/certs/ca.cert.pem
ca_key_file = /opt/flauthority/private/ca.key.pem
ca_config_file = /opt/flauthority/openssl.cnf
ca_crl_file = /opt/flauthority/crl/ca.crl.pem

#the folder where the clr file gets generated to on the flask front-end server (when using flauthority as a crl endpoint)
flask_clr_path = /opt/flauthority/clr

#Temp folder for generating certs
work_folder = /opt/flauthority/work

#Store issued certificates here
cert_storage_folder = /opt/flauthority/issued_certs
delete_expired_certs_from_storage_folder = yes

#if this is false, flauthority won't be able to generate certs with existing name until they expire by date
#if set to yes, flauthority will auto-revoke them when a new request for the same subject name is received
auto_revoke_certs = yes

#The max cert lifetime a client can request (number of days)
max_cert_lifetime = 375

#If not specified, this is the default cert lifetime (number of days)
default_cert_lifetime = 10

#if yes, the client key passphrase will be persisted on disk on the ca server in the same folder as the cert and key,
#after the zip is uploaded
save_client_key_passphrase=no

#Could either be pass:something or file:something - same syntax as openssl uses internally
ca_key_passphrase = pass:hello

#Aws settings
aws_key=
aws_key_secret=
aws_bucket_name=
aws_s3_host_name=

logging_level=debug

#Country, State, Location, Organizational Unit settings for certificates
ca_c=NO
ca_st=Norway
ca_l=Oslo
ca_o=Test
allow_subject_names=*

#valid cert extensions. These must exist in the openssl ca config file!
allow_cert_extension=server_cert,client_cert


#if you want to auto-prefix your certs with a domain, type it in here (example: .domain.com)
auto_add_domain=